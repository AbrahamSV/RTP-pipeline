#! /bin/bash
#
# Run rtp-pipeline Gear
# Built to flywheel-v0 spec.
#

CONTAINER="[vistalab/rtp-pipeline]"
echo -e "$CONTAINER  Initiated"

# Configure the ENV for FSL
# chmod +x /etc/fsl/5.0/fsl.sh
source /etc/fsl/5.0/fsl.sh

# Configure the ENV
export FSLOUTPUTTYPE=NIFTI_GZ
export LD_LIBRARY_PATH=/opt/mcr/v95/runtime/glnxa64:/opt/mcr/v95/bin/glnxa64:/opt/mcr/v95/sys/os/glnxa64:$LD_LIBRARY_PATH
export XAPPLRESDIR=/opt/mcr/v95/X11/app-defaults

# Add mrtrix and ants to the path
# export PATH=/usr/lib/ants:/usr/lib/mrtrix3/bin:$PATH
export PATH=/usr/lib/ants:/mrtrix3/bin:$PATH

# Set DISPLAY for xvfb
export DISPLAY=:1.0

# Define the start Xvfb function
start_xvfb() {
  Xvfb :1 -screen 0 1920x1200x24+32 &> /dev/null &
}

# Configure paths
FLYWHEEL_BASE=/flywheel/v0
OUTPUT_DIR=$FLYWHEEL_BASE/output
INPUT_DIR=$FLYWHEEL_BASE/input
RTP_DIR=$OUTPUT_DIR/RTP

NIFTI_DIR=$INPUT_DIR/dwi
ANAT_DIR=$INPUT_DIR/anatomical
BVEC_DIR=$INPUT_DIR/bvec
BVAL_DIR=$INPUT_DIR/bval
FS_DIR=$INPUT_DIR/fs
TRACTPARAMS_DIR=$INPUT_DIR/tractparams

CONFIG_FILE=${FLYWHEEL_BASE}/config.json
PARAMS_FILE=${OUTPUT_DIR}/params.json

# Ensure there is an output directory
if [[ ! -d "$OUTPUT_DIR" ]]
then
  echo "$CONTAINER  $OUTPUT_DIR not found!"
  exit 1
fi

# Make the directories
#mkdir $WORK_DIR

# Move files into work directory and do the work
# ZIP_FILE=$(find ${ZIP_DIR} -type f -name "*.zip" | head -1)
# unzip $ZIP_FILE -d $WORK_DIR


# Find the dt6.mat file and use that as the input to RTP
# This will be done now inside matlab file
# DT6_FILE=$(find ${WORK_DIR} -type f -name "dt6.mat" | head -1)
# RTP_INPUT_DIR=$(dirname $DT6_FILE)

# Convert the config json to a RTP_params json file
$FLYWHEEL_BASE/parse_config.py \
		--input_file ${CONFIG_FILE} \
		--output_file ${PARAMS_FILE} \
		--input_dir ${INPUT_DIR} \
		--output_dir ${OUTPUT_DIR} \
	    --bvec_dir ${BVEC_DIR} \
   	 	--bval_dir ${BVAL_DIR} \
    	--nifti_dir ${NIFTI_DIR} \
    	--anat_dir ${ANAT_DIR} \
    	--fs_dir ${FS_DIR} \
        --tractparams_dir ${TRACTPARAMS_DIR}

# Make sure the params file is saved with the output
cp ${PARAMS_FILE} ${OUTPUT_DIR}

# Start Xvfb and pass the input arguments to RTP execute the algorithm
start_xvfb && time /usr/local/bin/RTP "$PARAMS_FILE" 

# Xvfb occasionally hangs -- make sure that Xvfb dies
kill -9 %1

# Get a list of the files in the output directory
outputs=$(find $RTP_DIR/* -maxdepth 0 -type f)

# If outputs exist, generate metadata, and exit
if [[ -z $outputs ]]
then
  echo "$CONTAINER  FAILED: No results found in output directory... Exiting"
  exit 1
else
  # Create the obj files from the ply files
  cd $RTP_DIR/tck_files
  for pl in *.ply
  do
      python $FLYWHEEL_BASE/ply2obj.py $pl ${pl/ply/obj} 
      rm $pl
  done
  # Copy csv, mat, and json files to output
  cp $RTP_DIR/csv_files/*.csv $OUTPUT_DIR
  cp $RTP_DIR/tck_files/*.tck $OUTPUT_DIR
  cp $RTP_DIR/tck_files/*.obj $OUTPUT_DIR
  # Copy some other files interesting for debugging
  cp $RTP_DIR/bin/*.nii.gz $OUTPUT_DIR
  cp $RTP_DIR/mrtrix/*wmCsd*mif $OUTPUT_DIR
  cp $RTP_DIR/afq*.mat $OUTPUT_DIR


  # Get basename for RTP ouput zip
  RTP_NAME=$(basename `find $RTP_DIR/ -type f -name "afq*.mat"` .mat)

  # Rename and Compress RTP_DIR
  cd $OUTPUT_DIR
  mv RTP $RTP_NAME
  chmod -R 777 $OUTPUT_DIR
  echo -e "$CONTAINER  compressing outputs..."
  zip -r RTP_Output_$RTP_NAME.zip $RTP_NAME && rm -rf $RTP_NAME

  # Set permissions for outputs (prevent root only r/w)
  chmod -R 777 $OUTPUT_DIR

  # End
  echo -e "$CONTAINER  Wrote: `ls`"
  echo -e "$CONTAINER  Done!"
fi

exit 0
